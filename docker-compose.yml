version: '3.8'

# ==============================================================================
# ZAAWANSOWANY SYSTEM TRADINGOWY BTC
# Local Development Environment
# ==============================================================================

services:
  # ============================================================================
  # DATA LAYER - Databases & Message Brokers
  # ============================================================================
  
  postgres:
    image: postgres:16-alpine
    container_name: btc-postgres
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading-network

  redis:
    image: redis:7-alpine
    container_name: btc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - trading-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: btc-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading-network

  # ============================================================================
  # MONITORING LAYER
  # ============================================================================

  mlflow:
    build:
      context: ./services/mlflow-tracking
      dockerfile: Dockerfile
    container_name: btc-mlflow
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/trading_db
      ARTIFACT_ROOT: /app/mlruns
      PORT: 5000
      MLFLOW_TRACKING_URI: http://localhost:5000
    volumes:
      - mlflow_data:/app/mlruns
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network

  prometheus:
    image: prom/prometheus:latest
    container_name: btc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./services/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - trading-network

  grafana:
    image: grafana/grafana:latest
    container_name: btc-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./services/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    networks:
      - trading-network

  # ============================================================================
  # DATA COLLECTION & VALIDATION
  # ============================================================================

  data-collector:
    build:
      context: ./services/data-collector
      dockerfile: Dockerfile
    container_name: btc-data-collector
    ports:
      - "8001:8001"
    environment:
      PORT: 8001
      SYMBOLS: BTCUSDT,ETHUSDT
      INTERVALS: 1m,5m,15m,1h
      REDIS_URL: redis://redis:6379
      VALIDATION_SERVICE_URL: http://data-validation:8082
      ENVIRONMENT: development
    depends_on:
      redis:
        condition: service_healthy
      data-validation:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network
    restart: unless-stopped

  data-validation:
    build:
      context: ./services/data-validation
      dockerfile: Dockerfile
    container_name: btc-data-validation
    environment:
      POSTGRES_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/trading_db
      REDIS_URL: redis://redis:6379
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/data-validation:/app
    networks:
      - trading-network

  # ============================================================================
  # PROCESSING LAYER
  # ============================================================================

  pathway:
    build:
      context: ./services/pathway
      dockerfile: Dockerfile
    container_name: btc-pathway
    environment:
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      MLFLOW_TRACKING_URI: http://mlflow:5000
    ports:
      - "8081:8081"
    depends_on:
      - redis
      - qdrant
      - mlflow
    volumes:
      - ./services/pathway:/app
    networks:
      - trading-network
    restart: unless-stopped

  # ============================================================================
  # INTELLIGENCE LAYER
  # ============================================================================

  optuna-optimizer:
    build:
      context: .
      dockerfile: services/optuna-optimizer/Dockerfile
    container_name: btc-optuna-optimizer
    environment:
      PORT: 8003
      MLFLOW_TRACKING_URI: http://mlflow:5000
      DATABASE_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/trading_db
    ports:
      - "8003:8003"
    depends_on:
      mlflow:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network
    restart: unless-stopped

  market-memory:
    build:
      context: .
      dockerfile: services/market-memory/Dockerfile
    container_name: btc-market-memory
    environment:
      PORT: 8004
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://redis:6379
    ports:
      - "8004:8004"
    depends_on:
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network
    restart: unless-stopped

  backtest-engine:
    build:
      context: .
      dockerfile: services/backtest-engine/Dockerfile
    container_name: btc-backtest-engine
    environment:
      PORT: 8002
      MLFLOW_TRACKING_URI: http://mlflow:5000
      DATABASE_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/trading_db
      QDRANT_URL: http://qdrant:6333
    ports:
      - "8002:8002"
    depends_on:
      mlflow:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - backtest_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network
    restart: unless-stopped

  mesa-simulation:
    build:
      context: .
      dockerfile: services/mesa-simulation/Dockerfile
    container_name: btc-mesa-simulation
    environment:
      PORT: 8005
      MLFLOW_TRACKING_URI: http://mlflow:5000
    ports:
      - "8005:8005"
    depends_on:
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network
    restart: unless-stopped

  pathway-pipeline:
    build:
      context: .
      dockerfile: services/pathway-pipeline/Dockerfile
    container_name: btc-pathway-pipeline
    environment:
      PORT: 8006
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
    ports:
      - "8006:8006"
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network
    restart: unless-stopped

  rl-agent:
    build:
      context: .
      dockerfile: services/rl-agent/Dockerfile
    container_name: btc-rl-agent
    environment:
      PORT: 8007
      MLFLOW_TRACKING_URI: http://mlflow:5000
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
    ports:
      - "8007:8007"
    depends_on:
      mlflow:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - rl_checkpoints:/checkpoints
    networks:
      - trading-network
    restart: unless-stopped
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # ============================================================================
  # EXECUTION LAYER
  # ============================================================================

  freqtrade:
    build:
      context: ./services/freqtrade
      dockerfile: Dockerfile
    container_name: btc-freqtrade
    environment:
      REDIS_URL: redis://redis:6379
      PATHWAY_URL: http://pathway:8081
      MARKET_MEMORY_URL: http://market-memory:8083
      RL_AGENT_URL: http://rl-agent:8086
      MLFLOW_TRACKING_URI: http://mlflow:5000
    ports:
      - "8080:8080"  # Freqtrade API
    depends_on:
      - redis
      - pathway
      - market-memory
    volumes:
      - ./services/freqtrade/user_data:/freqtrade/user_data
      - freqtrade_data:/freqtrade/data
    networks:
      - trading-network
    restart: unless-stopped

# ==============================================================================
# NETWORKS & VOLUMES
# ==============================================================================

networks:
  trading-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  mlflow_data:
  prometheus_data:
  grafana_data:
  backtest_data:
  rl_checkpoints:
  freqtrade_data:

